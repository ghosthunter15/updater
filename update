#!/data/data/com.termux/files/usr/bin/python3.6

#import os  # commed out: not used
#import chalk # commed out: not used
import subprocess
import doctest
import time
import sys
import logging

"""
    UPDATER is an apt wrapper.
    It upgrades an dose a full upgrade as well as removed old and
    outdated packages.

    For the menu: Enter 1 - 0 
"""

RED, GREEN, YELLOW, BLUE, MAGENTA, CAYN, ERROR, END = '\033[31;1m', '\033[32;1m', '\033[33;1m', '\033[34;1m', '\033[35;1m', '\033[36;1m', '\033[41;33;1m', '\033[0m'

#var's
__version = "1.8.7"

__rabbit = '''\n\t\t           BEWARE!\n 
                Man Eating Rabbits Up Ahead!
             '''
__nii = "\n\t      The knights who say nii."

# Store as hidden logfile: .updater.log : add 'w' to stop append too filemode, in logfile. : filemode='w',
logging.basicConfig(filename='.updater.log',
                    format='%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
                    datefmt='%m-%d %H:%M',
                    
                    level=logging.DEBUG)

# set logging to screen:
console = logging.StreamHandler()
console.setLevel(logging.INFO)

# set logging formatter: tell handler to use format:
formatter = logging.Formatter('%(name)-12s: %(levelname)-8s %(message)s')
console.setFormatter(formatter)

# add handler to root logger:
logging.getLogger('').addHandler(console)

# too add a logger, use this: logger1 = logging.getLogger('myapp.area1')
logger_1 = logging.getLogger('update.main_loop')
            
def apt_update():
    # ERRORCODE FOR THIS FUNC IS 6
    #call apt
    """
    # TESTING: NO BUGS
    # if no network connection may have returncode=100 fails doctest 
    >>> subprocess.run(['apt', 'update'])
    CompletedProcess(args=['apt', 'update'], returncode=0)
    >>> 
    """

    print("\033[93m              ---APT UPDATING---\033[0m")
    print("\033[93m             ==================== \033[0m")
    subprocess.run(['apt', 'update'])
    print("\033[93m                  ---DONE---\033[0m")
    print("\033[93m                 ============\033[0m\n\n")
    time.sleep(2)

def apt_upgrade():
    # ERRORCODE FOR THIS FUNC IS 5
    # upgrade apt
    # if no network connection may have returncode=100)
    """
    >>> subprocess.run(['apt', 'upgrade', '--dry-run'])
    CompletedProcess(args=['apt', 'upgrade', '--dry-run'], returncode=0)
    >>> 
    """

    print("\033[93m              ---APT UPGRADING---\033[0m")
    print("\033[93m             =====================\033[0m")
    subprocess.run(['apt', 'upgrade', '-y'])
    print("\033[93m                  ---DONE---\033[0m")
    print("\033[93m                 ============\033[0m\n\n")
    time.sleep(2)

def apt_list_upgrades():
    # ERRORCODE FOR THIS FUNC IS 4
    """
    >>> subprocess.run(['apt', 'list', '--upgradable'])
    CompletedProcess(args=['apt', 'list', '--upgradable'], returncode=0)
    >>> 
    """

    print("\033[93m              ---APT LISTING UPGRADES---\033[0m")
    print("\033[93m             ============================\033[0m")
    subprocess.run(['apt', 'list', '--upgradable'])
    print("\033[93m                  ---DONE---\033[0m")
    print("\033[93m                 ============\033[0m\n\n")
    time.sleep(4)


def full_upgrade(): 
    # ERRORCODE FOR THIS FUNC IS 3
    # add to menue: not done:
    #adding apt full-upgrade # In testing:
    """
    >>> subprocess.run(['apt', 'full-upgrade', '--dry-run'])
    CompletedProcess(args=['apt', 'full-upgrade', '--dry-run'], returncode=0)
    >>> 
    """
    print("\033[93m              ---APT FULL UPGRADE---    \033[0m")
    print("\033[93m             ========================   \033[0m")
    subprocess.run(['apt', 'full-upgrade', '-y'])
    print("\033[93m                  ---DONE---\033[0m")
    print("\033[93m                 ============\033[0m\n\n")
    time.sleep(3)

def remover():
    # ERRORCODE FOR THIS FUNC IS 2
    # removes outdated pkg's:
    """
    >>> subprocess.run(['apt', 'autoremove', '--dry-run'])
    CompletedProcess(args=['apt', 'autoremove', '--dry-run'], returncode=0)
    >>> 
    """
    print("\033[33;1m           ---APT AUTOREMOVE---            \033[0m")
    print("\033[33;1m           ======================           \033[0m\n\n")
    subprocess.run(['apt', 'autoremove', '-y'])
    print('\033[33;1m                 ---DONE---\033[0m')
    print('\033[33;1m                ============\033[0m')
    time.sleep(3)

def clear_screen():
    # ERRORCODE FOR THIS FUNC IS 1
    # clears the screen
    """
    >>> __dots = '..........'
    >>> for i in __dots:
    ...     sys.stdout.write(str(i))
    ...     sys.stdout.flush()
    ...     time.sleep(0.2)
    ...     
    .1
    .1
    .1
    .1
    .1
    .1
    .1
    .1
    .1
    .1
    >>> 
    
    """
    """ 
    >>> subprocess.run(['clear'])
        CompletedProcess(args=['clear'], returncode=0)
    >>> 
    """

    # add wait dots:
    __dots = '.......................................................'
    try:
        for i in __dots:
            sys.stdout.write(YELLOW + str(i) + END)
            sys.stdout.flush()
            time.sleep(0.2)
    except:
        logging.warning(ERROR + 'ERRORCODE=1' + END)
        print(ERROR + 'ERROR CODE=1' + END)
        raise
    try:
        subprocess.run(['clear'])
    except:
        logging.warning(ERROR + 'ERRORCODE=1' + END)
        print('\033[41;33;1m ERROR CODE=1 \033[0m')
        raise

# clear log :: in testing, always use no ofr testing
# ERRORCODE for this func is 7
def clear_log():
    """
    >>> subprocess.run(['rm', '-v', '-i', '.updater.log']) 
    CompletedProcess(args=['rm', '-v', '-i', '.updater.log'], returncode=0)

    """
    subprocess.run(['rm', '-v', '-i', '.updater.log'])

   # print('\033[95m         {} \033[0m\n\n\n'.format(__rabbit)) # for testing func call

def main():
    # Main function
    try:
        while True:

            # clean up the screen
            #add menu num 8
        
            clear_screen()
        

            print("\033[93m              ----APT UPDATER----\033[0m")
            print("\033[93m             =====================\033[0m\n\n\n")
            #print("\n")
            print("\033[92m         ---OPTIONS---\033[0m")
            print("\033[92m        ===============\033[0m")
            print("\033[92m      1: to check updates for apt.\033[0m")
            print("\033[92m      2: to list upgradable packages.\033[0m")
            print("\033[92m      3: to upgrade packages.\033[0m")
            print("\033[92m      4: to fully upgrade apt.\033[0m")
            print("\033[32;1m      5: to run autoremove.\033[0m")
            print("\033[32;1m      6: to see credets.\033[0m")
            print("\033[32;1m      7: to test applet.\033[0m")
            print("\033[92m      0: to exit.\033[0m")
            user_input = input("\033[93m ==> \033[0m")
        
# menu 0 | exit only
            if user_input == '0':
                print("\033[93m              ---NOW EXITING---\033[0m")
                print("\033[93m             ===================\033[0m")
                clear_screen()
            #time.sleep(5)
                sys.exit()

# menu 1
            elif user_input == '1':
                try:
                    apt_update()
                except:
                    logging.warning(ERROR + 'ERRORCODE=6' + END)
                    print('\033[41;33;1m ERROR! \033[0m')
                    raise
                    time.sleep(15)

# menu 2
            elif user_input == '2':
                try:
                    apt_list_upgrades()
                except:
                    logging.warning(ERROR + 'ERRORCODE=4' + END)
                    print('\033[41;33;1m ERROR! \033[0m')
                    time.sleep(15)

# menu 3
            elif user_input == '3':
                try:
                    apt_upgrade()
                except:
                    logging.warning(ERROR + 'ERRORCODE=5' + END)
                    print('\033[41;33;1m ERROR! \033[0m')
                    raise
                    time.sleep(15)

# menu 6
            elif user_input == '6':
                ''' credets '''
                print("\033[96m              ---CREDETS---\033[0m")
                print("\033[96m             ===============\033[0m")
                print("\n")
                print("\033[96m        Version {} \033[0m".format(__version))
                """
                >>> print("        Version "__version)
                version 1.8.7
                """
                print("\033[96m        Written by: Steve Gibson.\033[0m")
                print("\033[96m        Written on: July, 6th 2017.\033[0m")
                print("\n")
                time.sleep(5)

            elif user_input == '6':
                ''' credets '''
                print("\033[96m              ---CREDETS---\033[0m")
                print("\033[96m             ===============\033[0m")
                print("\n")
                print("\033[96m        Version {} \033[0m".format(__version))
                """
                >>> print("        Version "__version)
                version 1.8.7
                """
                print("\033[96m        Written by: Steve Gibson.\033[0m")
                print("\033[96m        Written on: July, 6th 2017.\033[0m")
                print("\n")
                time.sleep(5)

# menu 8
            elif user_input == '8':
                try:
                    clear_log()
                except:
                    logging.warnig(ERROR + 'ERRORCODE=7' + END)
                    print('\033[41;33;1m ERROR! \033[0m')
                    raise

                time.sleep(15)

# menu 9
            elif user_input == '9':
                print("\033[95m         {} \033[0m\n\n\n".format(__nii))
                time.sleep(3)

# menu 7
            elif user_input == '7':
                try:
                    doctest.testmod(verbose=True)
                    time.sleep(15)
                except:
                    logging.info(YELLOW + 'ERROR IN THE DOCTEST' + END)
                    print('\033[41;33;1m ERROR! \033[0m')
                    raise
                    time.sleep(15)

# menu 4
            elif user_input == '4':
                try:
                    full_upgrade()
                except:
                    logging.warning(ERROR + 'ERRORCODE=3' + END)
                    print("\t\t\033[33;41;1m ERROR! \t\t\033[0m")
                    raise
                    time.sleep(15)

# menu 5
            elif user_input == '5':
                try:
                    remover()
                except:
                    logging.error(ERROR + 'ERRORCODE=3' + END)
                    print('\033[33;41;1m ERROR! \033[0m')
                    raise
                    time.sleep(15)
            else:
                print("\t\t\033[33;41;1m       ---UNKNOWN INPUT---      \t\t\033[0m")
                print("\t\t\033[33;41;1m      =====================     \t\t\033[0m\n")
                logging.warning(YELLOW + 'ERRORCODE=7' + END) # this also shows in console:
                logger_1.info(CAYN + '[!] Enter 1-0 too run wrapper' + END)
                time.sleep(10)

    except KeyboardInterrupt:
        logger_1.debug(CAYN + '\tKeyboardInterrupt in main() loop.' + END)
        print(YELLOW + '\n\n  [!]\tKeyboardInterrupt\n\n' + END)
        time.sleep(3)

if __name__ == '__main__':
    """
    Boiler Plate:
    Calls doctest for debugging;
        2 items had no tests: # Not an issue:
            __main__
            __main__.main
        6 items passed all tests:
            1 tests in __main__.apt_list_upgrades
            1 tests in __main__.apt_update
            2 tests in __main__.clear_screen
            1 tests in __main__.clear_log
            1 tests in __main__.apt_upgrade
            1 tests in __main__.full_upgrade
            1 tests in __main__.remover
        8 tests in 9 items.
        8 passed and 0 failed.
        Test passed.
    Calls the main function;
        Updates all installed apt packages,
        Addes and removes apt packages
    """


    # comm out after debugging:
   # doctest.testmod(verbose=True)

    # Calling main(); Uncomm when done debugging:
    """
    >>> main()
    """
    main() 
