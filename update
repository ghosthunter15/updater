#!/data/data/com.termux/files/usr/bin/python3.6

#import os  # commed out: not used
#import chalk # commed out: not used
import subprocess
import doctest
import time
import sys

"""
>>> main()
"""

#var's
__version__ = "1.5"

__rabbit__ = '''\n\t           BEWARE!\n 
                 Man Eating Rabbits Up Ahead!
             '''
__nii__ = "\n\t      The knights who say nii."
            
def apt_update():
    #call apt
    """
    # TESTING: NO BUGS
    # if no network connection may have returncode=100 fails doctest 
    >>> subprocess.run(['apt', 'update'])
    CompletedProcess(args=['apt', 'update'], returncode=0)
    >>> 
    """

    print("\033[93m              ---APT UPDATING---\033[0m")
    print("\033[93m             ==================== \033[0m")
    subprocess.run(['apt', 'update'])
    print("\033[93m                  ---DONE---\033[0m")
    print("\033[93m                 ============\033[0m\n\n")
    time.sleep(2)

def apt_upgrade():
    # upgrade apt
    # if no network connection may have returncode=100)
    """
    >>> subprocess.run(['apt', 'upgrade', '-y'])
    CompletedProcess(args=['apt', 'upgrade', '-y'], returncode=0)
    >>> 
    """

    print("\033[93m              ---APT UPGRADING---\033[0m")
    print("\033[93m             =====================\033[0m")
    subprocess.run(['apt', 'upgrade', '-y'])
    print("\033[93m                  ---DONE---\033[0m")
    print("\033[93m                 ============\033[0m\n\n")
    time.sleep(2)

def apt_list_upgrades():
    """
    >>> subprocess.run(['apt', 'list', '--upgradable'])
    CompletedProcess(args=['apt', 'list', '--upgradable'], returncode=0)
    """

    print("\033[93m              ---APT LISTING UPGRADES---\033[0m")
    print("\033[93m             ============================\033[0m")
    subprocess.run(['apt', 'list', '--upgradable'])
    print("\033[93m                  ---DONE---\033[0m")
    print("\033[93m                 ============\033[0m\n\n")
    time.sleep(4)


def full_upgrade(): # add to menue: not done:
    """
    adding apt full-upgrade # In testing:
    >>> subprocess.run(['apt', 'full-upgrade'])
    CompletedProcess(args=['apt', 'full-upgrade'], returncode=0)
    >>> 
    """
    print("\033[93m              ---APT FULL UPGRADE---    \033[0m")
    print("\033[93m             ========================   \033[0m")
    subprocess.run(['apt', 'full-upgrade'])
    print("\033[93m                  ---DONE---\033[0m")
    print("\033[93m                 ============\033[0m\n\n")
    time.sleep(3)


def main():
    """
    # Main function

    """

    while True:

        print("\033[93m              ----APT UPDATER----\033[0m")
        print("\033[93m             =====================\033[0m\n\n\n")
        #print("\n")
        print("\033[92m         ---OPTIONS---\033[0m")
        print("\033[92m        ===============\033[0m")
        print("\033[92m      1: to check updates for apt.\033[0m")
        print("\033[92m      2: to list upgradable packages.\033[0m")
        print("\033[92m      3: to upgrade packages.\033[0m")
        print("\033[92m      4: to fully upgrade apt\033[0m")
        print("\033[32;1m      5: to see credets\033[0m")
        print("\033[32;1m      6: to test applet\033[0m")
        print("\033[92m      0: to exit.\033[0m")
        user_input = input("\033[93m ==> \033[0m")
        
        if user_input == '0':
            print("\033[93m              ---NOW EXITING---\033[0m")
            print("\033[93m             ===================\033[0m")
            time.sleep(5)
            sys.exit()
        elif user_input == '1':
            apt_update()
            #time.sleep(3) # don't need to dubble the wait time
        elif user_input == '2':
            apt_list_upgrades()
            #time.sleep(3) # don't need to dubble the wait time
        elif user_input == '3':
            apt_upgrade()
            #time.sleep(3) # don't need to dubble the wait time
        elif user_input == '5': # menu num 5
            print("\033[96m              ---CREDETS---\033[0m")
            print("\033[96m             ===============\033[0m")
            print("\n")
            print("\033[96m        Version {} \033[0m".format(__version__))
            """
            >>> print("        Version "__version__)
            version 1.5
            """
            print("\033[96m        Written by: Steve Gibson.\033[0m")
            print("\033[96m        Written on: July, 6th 2017.\033[0m")
            print("\n")
            time.sleep(5)
        elif user_input == '7': # menu 7
            print('\033[95m         {} \033[0m\n\n\n'.format(__rabbit__))
            time.sleep(3)
        elif user_input == '8': # menu num 8
            print("\033[95m         {} \033[0m\n\n\n".format(__nii__))
            time.sleep(3)
        elif user_input == '6': # menu num 6
            try:
                doctest.testmod(verbose=True)
            except:
                print('\033[41;33;1m ERROR! \033[0m')
        elif user_input == '4': # menu num 4
            try:
                full_upgrade()
            except:
                print("\t\t\033[33;41;1m       ---UNKNOWN INPUT---       \t\t\033[0m")
                print("\t\t\033[33;41;1m      =====================     \t\t\033[0m\n")
                time.sleep(5)
        else:
            print("\t\t\033[33;41;1m       ---UNKNOWN INPUT---      \t\t\033[0m")
            print("\t\t\033[33;41;1m      =====================     \t\t\033[0m\n")
            time.sleep(5)

if __name__ == '__main__':
    #doctest.testmod() # comm out after debugging
    """
    calling main()
    """
    main() #uncomm when done debugging
